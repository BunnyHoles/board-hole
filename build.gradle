plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'org.jreleaser' version '1.20.0'
}

import org.jreleaser.model.Active
import org.jreleaser.model.Distribution

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

}

repositories {
    mavenCentral()
}

dependencies {

    // -- Core Spring Boot Starters --
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    // Email dependencies removed - will be replaced with JWT-based email verification later
    // implementation 'org.springframework.boot:spring-boot-starter-mail'

    // -- View (Thymeleaf) --
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.2.RELEASE'

    // -- Development Tools --
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // -- Session Management (Redis) --
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'

    // -- API Documentation (SpringDoc) --
    // noinspection VulnerableLibrariesLocal
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.12"

    // -- Null Safety (JSpecify) --
    implementation "org.jspecify:jspecify:1.0.0"

    // -- Mapping (MapStruct) --
    implementation "org.mapstruct:mapstruct:1.6.3"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.6.3"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"

    // -- Lombok --
    compileOnly "org.projectlombok:lombok:1.18.40"
    annotationProcessor "org.projectlombok:lombok:1.18.40"

    // -- Database Drivers --
    runtimeOnly "com.mysql:mysql-connector-j:8.4.0"

    // -- Logging (JSON encoder, opt-in in prod) --
    implementation "net.logstash.logback:logstash-logback-encoder:8.1"

    // -- Dev only --
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

    // -- Actuator (Observability) --
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // -- Testing --
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:mysql'


    // -- RestAssured for E2E testing --
    testImplementation 'io.rest-assured:rest-assured:5.5.6'
    testImplementation 'io.rest-assured:json-path:5.5.6'
    testImplementation 'io.rest-assured:xml-path:5.5.6'

    // -- Testing utilities --
    testImplementation 'org.awaitility:awaitility:4.2.0'

    // -- Playwright for browser E2E testing --
    testImplementation 'com.microsoft.playwright:playwright:1.55.0'

}

tasks.named('test') {
    useJUnitPlatform {
        excludeTags 'e2e'
    }
    maxParallelForks = Runtime.runtime.availableProcessors() ?: 1
}

// E2E 테스트 전용 태스크
tasks.register('e2eTest', Test) {
    useJUnitPlatform {
        includeTags 'e2e'
    }
    maxParallelForks = Runtime.runtime.availableProcessors() ?: 1
}

// JReleaser가 실행되기 전에 부트 JAR을 생성하도록 보장
['jreleaserAssemble', 'jreleaserRelease', 'jreleaserFullRelease'].each { taskName ->
    tasks.named(taskName) { dependsOn tasks.named('bootJar') }
}

def jreleaserOwner = providers.environmentVariable('GITHUB_REPOSITORY_OWNER')
        .orElse(providers.gradleProperty('jreleaser.owner'))

def jreleaserRepo = providers.environmentVariable('GITHUB_REPOSITORY')
        .map { repo -> repo.substring(repo.indexOf('/') + 1) }
        .orElse(providers.gradleProperty('jreleaser.repo'))

def repositoryUrl = providers.gradleProperty('githubUrl')

jreleaser {
    project { proj ->
        proj.name = project.name
        proj.description = providers.gradleProperty('description').get()
        proj.version = project.version.toString()
        proj.authors = [providers.gradleProperty('projectGroup').get()]
        proj.license = providers.gradleProperty('apiLicenseName').get()

        proj.links { links ->
            links.homepage = repositoryUrl.get()
        }
    }

    release {
        github { gh ->
            gh.repoOwner = jreleaserOwner.get()
            gh.name = jreleaserRepo.get()
            gh.tagName = 'v{{projectVersion}}'
            gh.releaseName = 'v{{projectVersion}}'
            gh.overwrite = true

            gh.changelog { cl ->
                cl.preset = providers.gradleProperty('jreleaser.changelogPreset').get()
                cl.skipMergeCommits = true
                cl.hide { hide -> hide.uncategorized = true }
            }
        }
    }

    distributions {
        register('app') { dist ->
            dist.type = Distribution.DistributionType.JAVA_BINARY
            dist.artifact { art ->
                art.path = file("build/libs/${project.name}-${project.version}.jar")
            }
            dist.java { javaCfg ->
                javaCfg.mainClass = 'bunny.boardhole.BoardHoleApplication'
            }
        }
    }

    packagers {
        docker { dk ->
            dk.active = Active.NEVER
        }
    }
}

// Resource filtering for @project.version@ placeholder replacement
processResources {
    filteringCharset = 'UTF-8'
    filesMatching('**/*.yml') {
        expand(project.properties)
    }
    filesMatching('**/*.yaml') {
        expand(project.properties)
    }
    filesMatching('**/*.properties') {
        expand(project.properties)
    }
}

// JAR 파일 이름에 버전 포함
bootJar {
    archiveFileName = "${project.name}-${project.version}.jar"
}
