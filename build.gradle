plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.openrewrite.rewrite' version '7.15.0'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'checkstyle'
    id 'org.sonarqube' version '6.3.1.5724'
    id 'com.github.spotbugs' version '6.2.6'
}

group = 'bunny'
version = '0.0.1-SNAPSHOT'
description = 'board-hole'

springBoot {
    buildInfo()  // BuildProperties 빈 생성으로 버전 정보를 런타임에 사용 가능
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // -- SpotBugs Security Plugin --
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.14.0'
    
    // -- Core Spring Boot Starters --
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    
    // -- Session Management (Redis) --
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'

    // -- API Documentation (SpringDoc) --
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.11"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-api:2.8.11"

    // -- Mapping (MapStruct) --
    implementation "org.mapstruct:mapstruct:1.6.3"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.6.3"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"

    // -- Lombok --
    compileOnly "org.projectlombok:lombok:1.18.38"
    annotationProcessor "org.projectlombok:lombok:1.18.38"

    // -- Database Drivers --
    runtimeOnly "com.mysql:mysql-connector-j:9.4.0"

    // -- Logging (JSON encoder, opt-in in prod) --
    implementation "net.logstash.logback:logstash-logback-encoder:8.1"

    // -- Dev only --
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

    // -- Testing --
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.h2database:h2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
    // -- ArchUnit for architecture testing --
    testImplementation 'com.tngtech.archunit:archunit-junit5:1.4.1'

    // -- OpenRewrite recipes (static analysis/refactoring) --
    rewrite 'org.openrewrite.recipe:rewrite-spring:6.13.0'
    rewrite 'org.openrewrite.recipe:rewrite-static-analysis:2.16.0'
}

tasks.named('test') {
    useJUnitPlatform()
    
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = "short"
    }
}

rewrite {
    activeRecipe('bunny.boardhole.refactor.main')
    exportDatatables = true
}

checkstyle {
    toolVersion = '10.12.5'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    maxWarnings = 0
    ignoreFailures = false
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = true
        html.required = true
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "bunnyxiyo_board-hole"
        property "sonar.organization", "bunnyxiyo"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "build/classes"
        property "sonar.java.test.binaries", "build/test-results/test"
        property "sonar.exclusions", "**/*Test.java, **/*Tests.java, **/test/**"
    }
}

task sonarAnalysis {
    group = 'verification'
    description = 'Run SonarCloud analysis'
    doLast {
        println 'Running SonarCloud analysis...'
        println 'Execute: ./gradlew sonar'
    }
    dependsOn 'sonar'
}

spotbugs {
    toolVersion = '4.8.6'
    effort = 'max'  // 분석 강도: min, default, max
    reportLevel = 'medium'  // 버그 리포트 레벨: low, medium, high
    ignoreFailures = false  // 버그 발견시 빌드 실패 여부
}

spotbugsMain {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main.html")
        }
        xml {
            required = false  // SonarCloud 연동시 true로 변경
        }
        text {
            required = true  // 터미널 출력용
            outputLocation = file("$buildDir/reports/spotbugs/main.txt")
        }
    }
}

spotbugsTest {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/test.html")
        }
        text {
            required = false
        }
    }
}

task spotbugsConsole {
    group = 'verification'
    description = 'Run SpotBugs and display results in console'
    dependsOn 'spotbugsMain'
    doLast {
        def reportFile = file("$buildDir/reports/spotbugs/main.txt")
        if (reportFile.exists()) {
            println "\n========== SpotBugs Analysis Results =========="
            println reportFile.text
            println "================================================\n"
        } else {
            println "No bugs found! ✅"
        }
    }
}
