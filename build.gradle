plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'jacoco'
    id 'org.sonarqube' version '6.3.1.5724'
    id 'net.researchgate.release' version '3.1.0'
    id 'org.hildan.github.changelog' version '2.2.0'
}

group = 'bunny'
// version은 gradle.properties에서 관리
description = 'board-hole'

springBoot {
    buildInfo()  // BuildProperties 빈 생성으로 버전 정보를 런타임에 사용 가능
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

}

repositories {
    mavenCentral()
}

dependencies {

    // -- Core Spring Boot Starters --
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // -- Development Tools --
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // -- Session Management (Redis) --
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'

    // -- API Documentation (SpringDoc) --
    // noinspection VulnerableLibrariesLocal
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.12"

    // -- Null Safety (JSpecify) --
    implementation "org.jspecify:jspecify:1.0.0"

    // -- Mapping (MapStruct) --
    implementation "org.mapstruct:mapstruct:1.6.3"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.6.3"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"

    // -- Lombok --
    compileOnly "org.projectlombok:lombok:1.18.38"
    annotationProcessor "org.projectlombok:lombok:1.18.38"

    // -- Database Drivers --
    runtimeOnly "com.mysql:mysql-connector-j:9.4.0"

    // -- Logging (JSON encoder, opt-in in prod) --
    implementation "net.logstash.logback:logstash-logback-encoder:8.1"

    // -- Dev only --
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

    // -- Testing --
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.h2database:h2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // -- RestAssured for E2E testing --
    testImplementation 'io.rest-assured:rest-assured:5.5.0'
    testImplementation 'io.rest-assured:json-path:5.5.0'
    testImplementation 'io.rest-assured:xml-path:5.5.0'

    // -- TestContainers for real SMTP testing --
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'

    // -- ArchUnit for architecture testing --
    testImplementation 'com.tngtech.archunit:archunit-junit5:1.4.1'


    // -- Resilience / Retry --
    implementation 'org.springframework.retry:spring-retry'
}

tasks.named('test') {
    // Default: run only unit tests (exclude slower suites)
    useJUnitPlatform {
        excludeTags 'integration', 'e2e'
    }

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = "short"
    }
}

// Enable deprecation warnings for all compile tasks
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-Xlint:deprecation', '-Xlint:unchecked']
}
// Removed REST Docs related tasks and plugins


sonarqube {
    properties {
        property "sonar.projectKey", "bunnyxiyo_board-hole"
        property "sonar.organization", "bunnyxiyo"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "build/classes"
        property "sonar.java.test.binaries", "build/test-results/test"
        property "sonar.exclusions", "**/*Test.java, **/*Tests.java, **/test/**"

        // Jacoco 커버리지 리포트 경로 (집계 리포트)
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/all/jacocoAllTestReport.xml"

    }
}

tasks.register('sonarAnalysis') {
    group = 'verification'
    description = 'Run SonarCloud analysis with coverage reports'
    dependsOn 'jacocoAllTestReport'
    finalizedBy 'sonar'

    doLast {
        println """
        ==========================================
        📊 SonarCloud 분석 준비 완료
        ==========================================
        ✅ Jacoco: 테스트 커버리지 리포트 생성
        ==========================================
        SonarCloud에 리포트 업로드 중...
        ==========================================
        """
    }
}


// Semantic Versioning 자동화 설정
release {
    failOnCommitNeeded = true
    failOnPublishNeeded = true
    failOnSnapshotDependencies = true
    failOnUnversionedFiles = true
    failOnUpdateNeeded = true
    revertOnFail = true

    tagTemplate = 'v${version}'
    versionPropertyFile = 'gradle.properties'

    preCommitText = '[Release]'
    preTagCommitMessage = 'Release version'
    newVersionCommitMessage = 'Prepare next version'
    tagCommitMessage = 'Release version'

    buildTasks = ['build']

    git {
        requireBranch.set('master')
        pushToRemote.set('origin')
    }
}

// Changelog 자동 생성 설정
changelog {
    githubUser = 'bunnyxiyo'
    githubRepository = 'board-hole'

    outputFile = file("${projectDir}/CHANGELOG.md")

    // Sections configuration
    sections = [
            [title: '✨ New Features', labels: ['feature', 'enhancement', 'feat']],
            [title: '🐛 Bug Fixes', labels: ['bug', 'fix', 'bugfix']],
            [title: '📝 Documentation', labels: ['documentation', 'docs']],
            [title: '♻️ Refactoring', labels: ['refactor', 'refactoring']],
            [title: '🔧 Maintenance', labels: ['chore', 'maintenance']],
            [title: '⚡ Performance', labels: ['performance', 'perf']],
            [title: '🔒 Security', labels: ['security']],
            [title: '✅ Tests', labels: ['test', 'tests', 'testing']]
    ]

    excludeLabels = ['duplicate', 'wontfix', 'invalid', 'question']
}

// 통합 릴리즈 태스크
task releaseWithChangelog {
    group = 'release'
    description = 'Generate changelog and perform release'
    dependsOn 'generateChangelog'
    finalizedBy 'release'

    doLast {
        println """
        ======================================
        📦 Release Process Started
        ======================================
        1. Generating CHANGELOG.md from GitHub PRs/Issues
        2. Updating version in gradle.properties
        3. Creating Git tag
        4. Pushing to remote repository
        ======================================
        """
    }
}

// 드라이런 태스크
task releaseDryRun {
    group = 'release'
    description = 'Dry run of release process (no actual changes)'

    doLast {
        println """
        ======================================
        🔍 Release Dry Run
        ======================================
        Current version: ${project.version}
        Next patch version would be: ${project.version.toString().replace('-SNAPSHOT', '').split('\\.').with {
            "${it[0]}.${it[1]}.${(it[2] as Integer) + 1}"
        }}
        Tag would be: v${project.version.toString().replace('-SNAPSHOT', '')}
        ======================================
        Run './gradlew release' to perform actual release
        Run './gradlew generateChangelog' to preview CHANGELOG
        ======================================
        """
    }
}

// 내부 패치 버전 관리 태스크들
task buildAlpha {
    group = 'release'
    description = 'Build with alpha version (use -Palpha=1)'

    doLast {
        def alphaNumber = project.hasProperty('alpha') ? project.alpha : '1'
        def alphaVersion = "${project.version.toString().replace('-SNAPSHOT', '')}-alpha.${alphaNumber}"
        println "Building Alpha Version: ${alphaVersion}"
    }

    dependsOn 'build'
}

task buildBeta {
    group = 'release'
    description = 'Build with beta version (use -Pbeta=1)'

    doLast {
        def betaNumber = project.hasProperty('beta') ? project.beta : '1'
        def betaVersion = "${project.version.toString().replace('-SNAPSHOT', '')}-beta.${betaNumber}"
        println "Building Beta Version: ${betaVersion}"
    }

    dependsOn 'build'
}

task buildRC {
    group = 'release'
    description = 'Build with RC version (use -Prc=1)'

    doLast {
        def rcNumber = project.hasProperty('rc') ? project.rc : '1'
        def rcVersion = "${project.version.toString().replace('-SNAPSHOT', '')}-rc.${rcNumber}"
        println "Building Release Candidate: ${rcVersion}"
    }

    dependsOn 'build'
}

task buildWithGitHash {
    group = 'release'
    description = 'Build with git commit hash in version'

    doLast {
        def gitHash = 'unknown'
        try {
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'rev-parse', '--short', 'HEAD'
                standardOutput = stdout
            }
            gitHash = stdout.toString().trim()
        } catch (Exception ignored) {
            // ignore
        }

        def hashVersion = "${project.version}-${gitHash}"
        println "Building with Git Hash: ${hashVersion}"
    }

    dependsOn 'build'
}

task buildWithTimestamp {
    group = 'release'
    description = 'Build with timestamp in version'

    doLast {
        def timestamp = new Date().format('yyyyMMddHHmmss')
        def timestampVersion = "${project.version}-${timestamp}"
        println "Building with Timestamp: ${timestampVersion}"
    }

    dependsOn 'build'
}

// 버전 정보 출력 태스크
task showVersion {
    group = 'release'
    description = 'Show current project version'

    doLast {
        println """
        ======================================
        📦 Version Information
        ======================================
        Base Version: ${project.version}
        Group: ${project.group}
        Project: ${project.name}
        ======================================
        Available version types:
        - Alpha: ./gradlew buildAlpha -Palpha=1
        - Beta: ./gradlew buildBeta -Pbeta=1
        - RC: ./gradlew buildRC -Prc=1
        - Git Hash: ./gradlew buildWithGitHash
        - Timestamp: ./gradlew buildWithTimestamp
        - CI Build: ./gradlew build -PbuildNumber=123
        ======================================
        """
    }
}

// =======================================
// 품질 검사 도구 설정 (Issue #14)
// =======================================

// Jacoco 설정 (테스트 커버리지)
jacoco {
    toolVersion = '0.8.12'
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = true  // SonarQube 연동용
        html.required = true // 개발자 확인용
        csv.required = false
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/*Application*',     // Spring Boot main class
                    '**/*Config*',          // Configuration classes
                    '**/*Test*',            // Test classes
                    '**/*Exception*',       // Exception classes
                    '**/dto/**',            // DTO classes
                    '**/entity/**'          // Entity classes (optional)
            ])
        }))
    }
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport

    violationRules {
        rule {
            limit {
                minimum = 0.60  // 현재 수준 (64%) 근처로 설정
            }
        }

        rule {
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.40  // 점진적 개선용 낮은 임계값
            }
        }

        rule {
            element = 'METHOD'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.50  // 점진적 개선용 낮은 임계값
            }
        }
    }
}

// Jacoco coverage for additional suites and aggregate report
tasks.register('jacocoIntegrationTestReport', JacocoReport) {
    dependsOn tasks.named('integrationTest')
    reports {
        xml.required = true
        html.required = true
    }
    executionData file("$buildDir/jacoco/integrationTest.exec")
    sourceDirectories.from = files(sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(sourceSets.main.output)
}

tasks.register('jacocoE2ETestReport', JacocoReport) {
    dependsOn tasks.named('e2eTest')
    reports {
        xml.required = true
        html.required = true
    }
    executionData file("$buildDir/jacoco/e2eTest.exec")
    sourceDirectories.from = files(sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(sourceSets.main.output)
}

tasks.register('jacocoAllTestReport', JacocoReport) {
    description = 'Aggregated coverage for unit, integration, e2e tests'
    group = 'verification'
    dependsOn tasks.named('test'), tasks.named('integrationTest'), tasks.named('e2eTest')
    reports {
        xml.required = true
        html.required = true
        xml.outputLocation = file("$buildDir/reports/jacoco/all/jacocoAllTestReport.xml")
        html.outputLocation = file("$buildDir/reports/jacoco/all/html")
    }
    executionData = files(
            "$buildDir/jacoco/test.exec",
            "$buildDir/jacoco/integrationTest.exec",
            "$buildDir/jacoco/e2eTest.exec"
    ).filter { it.exists() }
    sourceDirectories.from = files(sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(sourceSets.main.output)
}

// -------------------------------------------------
// Additional JUnit tag-based test tasks
// -------------------------------------------------
tasks.register('integrationTest', Test) {
    description = 'Runs @Tag("integration") tests'
    group = 'verification'

    useJUnitPlatform {
        includeTags 'integration'
    }

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = "short"
    }

    shouldRunAfter tasks.named('test')
}

tasks.register('e2eTest', Test) {
    description = 'Runs @Tag("e2e") tests'
    group = 'verification'

    useJUnitPlatform {
        includeTags 'e2e'
    }

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = "short"
    }

    shouldRunAfter tasks.named('integrationTest')
}

// Convenience aggregator to run all suites in order without redefining a Test task
tasks.register('allTests') {
    description = 'Runs unit, integration, and e2e tests'
    group = 'verification'
    dependsOn tasks.named('test'), tasks.named('integrationTest'), tasks.named('e2eTest')
}


// =======================================
// Null Safety 자동화 (자동 package-info.java 생성)
// =======================================

task ensureNullMarked {
    group = 'build setup'
    description = 'Ensure all packages have @NullMarked package-info.java files'

    doLast {
        def srcDir = file('src/main/java')
        def packages = [:]

        // 모든 .java 파일이 있는 패키지 수집
        fileTree(srcDir) {
            include '**/*.java'
            exclude '**/package-info.java'
        }.each { javaFile ->
            def packageDir = javaFile.parentFile
            def packageName = packageDir.path
                    .replace(srcDir.path + File.separator, '')
                    .replace(File.separator, '.')
            packages[packageDir] = packageName
        }

        // package-info.java가 없는 패키지에 자동 생성
        packages.each { packageDir, packageName ->
            def packageInfoFile = new File(packageDir, 'package-info.java')
            if (!packageInfoFile.exists()) {
                packageInfoFile.text = """/**
 * ${packageName} package
 */
@NullMarked
package ${packageName};

import org.jspecify.annotations.NullMarked;
"""
                println "✅ Generated package-info.java for: ${packageName}"
            }
        }
    }
}

// 컴파일 전에 자동으로 package-info.java 생성
compileJava.dependsOn ensureNullMarked

// build 태스크가 테스트 커버리지를 포함하도록 설정
build {
    dependsOn jacocoTestCoverageVerification
}


// 품질 게이트 통합 설정 적용 (임시 비활성화)
// apply from: 'gradle/quality-gates.gradle'
