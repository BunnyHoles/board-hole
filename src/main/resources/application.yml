# ========================================
# Board-Hole 애플리케이션 공통 설정
# 모든 환경에서 공유되는 기본 설정
# ========================================

spring:
  # 애플리케이션 기본 정보
  application:
    name: board-hole
  
  # 메시지 소스 설정
  messages:
    basename: messages
    encoding: UTF-8
    fallback-to-system-locale: true

  # MVC 설정
  mvc:
    problemdetails:
      enabled: true  # Enable RFC 7807 Problem Details for HTTP APIs
  
  # JPA 공통 설정
  jpa:
    open-in-view: false
    properties:
      hibernate:
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
  
  # 기본 프로필 (로컬 개발시 dev 사용)
  profiles:
    active: dev
  
  # ANSI 컬러 출력 설정
  output:
    ansi:
      enabled: DETECT  # 터미널 지원시 자동 활성화 (ALWAYS, DETECT, NEVER)
  
  session:
    redis:
      namespace: board-hole:session
      flush-mode: on-save
    timeout: 30m
  
  # 비동기 처리 설정 - Spring Boot 기본 제공
  task:
    execution:
      pool:
        core-size: ${ASYNC_CORE_SIZE:2}
        max-size: ${ASYNC_MAX_SIZE:10}
        queue-capacity: ${ASYNC_QUEUE_CAPACITY:100}
        keep-alive: 60s
      thread-name-prefix: Async-
      shutdown:
        await-termination: true
        await-termination-period: 10s
  
  # 이메일 설정
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          ssl:
            trust: ${MAIL_HOST:smtp.gmail.com}
    test-connection: false

# ========================================
# 애플리케이션 도메인 설정
# ========================================
boardhole:
  # 검증 규칙
  validation:
    board:
      title-max-length: 200
      content-max-length: 10000
    user:
      username-min-length: 3
      username-max-length: 20
      password-min-length: 8
      password-max-length: 100
      email-max-length: 255
      name-min-length: 1
      name-max-length: 50
    email-verification:
      # Unified units to milliseconds
      expiration-ms: 7200000          # 2 hours
      code-length: 6
      signup-expiration-ms: 7200000   # 2 hours
  
  # 보안 설정
  security:
    verification-code:
      length: 6
      expiry-minutes: 30
      charset: "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    role-prefix: "ROLE_"
    session-timeout-minutes: 30
  
  # 인증 설정
  auth:
    default-role: "USER"

  # 성능 임계값
  performance:
    logging:
      fast-threshold-ms: 100
      normal-threshold-ms: 500
      slow-threshold-ms: 1000
      duration-threshold-ms: 1000
  
  # 이메일 관련 설정
  email:
    base-url: ${EMAIL_BASE_URL:http://localhost:8080}
    from-name: ${EMAIL_FROM_NAME:Board-Hole}
    verification-expiration-ms: 7200000
    rate-limit:
      per-hour: 5
      per-day: 20
  
  # CORS 기본값 (환경별 프로필에서 오버라이드 권장)
  cors:
    path-patterns: "/api/**"
    allowed-origins: "*"
    allowed-methods: "GET,POST,PUT,DELETE,OPTIONS"
    allowed-headers: "Origin,Content-Type,Accept,Authorization,X-Requested-With"
    exposed-headers: ""
    allow-credentials: false
    max-age: 3600
  
  # Problem Details API 설정
  problem:
    # 문제 유형(type) 링크의 베이스 URI
    # 비워두면 urn:problem-type:{slug} 형식으로 자동 생성
    base-uri: # null (의도적으로 비움)
  
  # 기본 사용자 템플릿 (비밀번호는 환경별 프로필에서 설정)
  default-users:
    admin:
      username: admin
      password: Admin123!  # 환경별로 오버라이드 권장 (정책 준수: 대/소문자+숫자+특수문자)
      name: 관리자
      email: admin@boardhole.com
    regular:
      username: user
      password: User123!  # 환경별로 오버라이드 권장 (정책 준수)
      name: 일반 사용자
      email: user@boardhole.com
  
  # OpenAPI 문서 설정
  api:
    title: Board-Hole API
    version: 0.0.1-SNAPSHOT
    description: |
      ## Board-Hole - Spring Boot Sample Code Repository
      
      Board-Hole은 "구덩이(Hole)"라는 의미로, 다양한 Spring Boot 샘플 코드를 모아둔 코드 저장소입니다.
      실무에서 자주 사용되는 패턴과 기술들을 한곳에 모아 학습과 참고 목적으로 제공합니다.
      
      ### 아키텍처 구성
      
      도메인별 모듈화된 레이어드 아키텍처를 적용했습니다.
      
      ```
      presentation → application → domain → infrastructure
      
      - presentation:  REST API Controller, DTO  
      - application:   Command/Query Service, MapStruct Mapper
      - domain:        Entity, Validation, Business Logic
      - infrastructure: Repository, External API
      
      각 도메인(user, board, email)별로 독립적인 모듈 구성
      ```
      
      ### 주요 샘플 코드 패턴
      
      #### 세션 기반 인증 시스템
      - Spring Security + Redis Session Store
      - 메소드 레벨 권한 제어(`@PreAuthorize` 활용)
      - 권한별 접근 제어(PUBLIC, AUTH, ROLE:USER, ROLE:ADMIN, OWNER)
      
      #### 게시판 CRUD 시스템
      - 페이지네이션 + 검색 기능 구현
      - Event-Driven(`@EventListener`로 조회수 증가 비동기 처리)
      - 커스텀 검증(`@Valid*` / `@Optional*` 어노테이션)
      
      #### 사용자 관리 시스템
      - 사용자 CRUD + 프로필 관리
      - 패스워드 정책 검증 및 이메일 변경 플로우
      
      #### 이메일 인증 시스템
      - 이메일 템플릿 시스템(HTML/Text)
      - Dummy/SMTP 이메일 서비스 구현체
      - Rate Limiting(시간당 5회, 일일 20회)
      - 검증 코드 만료 관리(2시간)
      
      ### 프로파일별 활성화 기능
      
      #### dev 프로파일(기본값)
      - Docker Compose: MySQL(13306) + Redis(16379) 자동 실행
      - 더미 이메일: 실제 발송 없이 로그로만 출력
      - 개발 도구: SQL 로깅, DDL 자동 업데이트, 디버그 로깅
      - 컬러 로깅: 콘솔에서 색상 출력으로 가독성 향상
      - 로컬 CORS: localhost/127.0.0.1 허용
      - 간단 비밀번호: admin123, user123
      
      #### prod 프로파일
      - 보안 강화: 환경변수 기반 설정, Secure Cookie
      - 운영 최적화: DDL 검증만, SQL 로깅 비활성화
      - 파일 로깅: 구조화된 로그 파일(10MB 롤링)
      - CORS 제한: 환경변수로 허용 도메인 제한
      - 환경변수 비밀번호: DATABASE_URL, ADMIN_PASSWORD 등
      
      #### smtp 프로파일
      - 실제 이메일 발송: Gmail SMTP 서버 사용
      - 재시도 메커니즘: 발송 실패 시 자동 재시도
      - 비동기 처리: 이메일 발송 비동기 처리로 성능 향상
      
      ### 기술 스택
      
      ```
      Framework:  Spring Boot 3.5.5 + Java 21
      Database:   MySQL 9.4 + Redis 8.0
      Security:   Spring Security + Session
      ORM:        Spring Data JPA + Hibernate
      Mapping:    MapStruct 1.6.3
      Testing:    JUnit 5 + Testcontainers + ArchUnit
      Quality:    Checkstyle + PMD + SpotBugs + SonarCloud
      API Doc:    SpringDoc OpenAPI 3
      ```
      
      ---
      
      이 API는 학습 목적의 샘플 코드입니다. 실무 프로젝트 구축 시 참고자료로 활용하세요.
    terms-of-service: https://boardhole.com/terms
    contact:
      name: BUNNY
      email: bunny@xiyo.dev
      url: https://github.com/XIYO/board-hole
    license:
      name: Apache 2.0
      url: https://www.apache.org/licenses/LICENSE-2.0

# ========================================
# 로깅 공통 설정
# ========================================
logging:
  pattern:
    # 컬러풀한 콘솔 출력 패턴
    console: "%clr(%d{HH:mm:ss.SSS}){cyan} %clr(%-5level) %clr([%15.15t]){magenta} %clr(%-40.40logger{39}){yellow} %clr(:){faint} %m%n%wEx"
    # 파일용 패턴 (컬러 없음)
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %-40.40logger{39} : %m%n%wEx"

# ========================================
# 서버 공통 설정
# ========================================
# 서버 관련 공통 설정은 환경별로 다르게 적용됨
# 필요시 여기에 공통 설정 추가 

# ========================================
# OpenAPI / Swagger UI 설정 (공통)
# ========================================
springdoc:
  # 스캔 범위 제한 (필요한 API만 포함)
  paths-to-match:
    - /api/**
