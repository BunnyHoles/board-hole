# <type>(<scope>): <subject>
# 
# <body>
# 
# <footer>

# Type 설명 (필수)
# =====================================
# feat     : 새로운 기능 추가 (MINOR 버전 증가)
# fix      : 버그 수정 (PATCH 버전 증가)
# docs     : 문서 변경
# style    : 포맷팅, 세미콜론 누락 등 (코드 변경 없음)
# refactor : 코드 리팩토링 (기능 변경 없음)
# test     : 테스트 추가 또는 수정
# chore    : 빌드 프로세스, 보조 도구 변경
# perf     : 성능 개선
# ci       : CI 설정 파일 및 스크립트 변경
# build    : 빌드 시스템 또는 외부 종속성 변경
# revert   : 이전 커밋 되돌리기

# feat!    : BREAKING CHANGE (MAJOR 버전 증가)
# fix!     : BREAKING CHANGE (MAJOR 버전 증가)

# Scope 예시 (선택사항)
# =====================================
# auth     : 인증 관련
# board    : 게시판 기능
# user     : 사용자 관리
# admin    : 관리자 기능
# api      : API 엔드포인트
# db       : 데이터베이스
# config   : 설정 파일
# test     : 테스트 관련
# deps     : 의존성 관련

# Subject 작성 규칙 (필수)
# =====================================
# - 50자 이내로 작성
# - 첫 글자는 소문자로 시작
# - 마침표(.) 사용하지 않음
# - 명령문 형태로 작성 (예: "add", "fix", "change")
# - 현재 시제 사용

# Body 작성 규칙 (선택사항)
# =====================================
# - 72자 단위로 줄 바꿈
# - '무엇을', '왜' 변경했는지 설명
# - '어떻게'보다는 '왜'에 집중
# - 빈 줄로 Subject와 구분

# Footer 작성 규칙 (선택사항)
# =====================================
# - 이슈 트래커 ID 참조
# - BREAKING CHANGE 설명
# - Closes #123, Fixes #456 형식 사용
# - Co-authored-by: name <email> 형식으로 공동 작업자 명시

# 커밋 메시지 예시
# =====================================
# feat(auth): add JWT refresh token support
#
# JWT 토큰 만료 시 자동으로 갱신할 수 있도록
# refresh token 기능을 추가했습니다.
# 
# - Refresh token 생성 및 검증 로직 구현
# - 토큰 갱신 API 엔드포인트 추가
# - 보안을 위해 refresh token은 HttpOnly 쿠키로 저장
#
# Closes #234

# BREAKING CHANGE 예시
# =====================================
# feat!(api): change authentication header format
#
# Authorization 헤더 형식을 변경했습니다.
# 기존: Authorization: token
# 변경: Authorization: Bearer token
#
# BREAKING CHANGE: API 클라이언트는 새로운 헤더 형식을
# 사용하도록 업데이트해야 합니다.

# 버전 자동화 관련 중요 사항
# =====================================
# 이 프로젝트는 커밋 메시지를 기반으로 자동 버전 관리가 됩니다:
# - feat: MINOR 버전 증가 (0.X.0)
# - fix: PATCH 버전 증가 (0.0.X)
# - feat! 또는 BREAKING CHANGE: MAJOR 버전 증가 (X.0.0)
#
# develop 브랜치: 자동으로 dev 버전 생성 (예: 1.2.3-dev.1)
# release 브랜치: RC 버전 생성 (예: 1.2.3-rc.1)
# main 브랜치: 정식 버전 릴리즈 (예: 1.2.3)