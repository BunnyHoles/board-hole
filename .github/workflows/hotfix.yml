name: Hotfix Emergency Deploy

on:
  push:
    branches: ['hotfix/**']
  workflow_dispatch:
    inputs:
      hotfix-description:
        description: 'Description of the hotfix'
        required: true
        type: string

jobs:
  emergency-fix:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
      - name: Get current production version
        id: current_version
        run: |
          # main 브랜치의 최신 태그 가져오기
          git fetch --tags
          LAST_TAG=$(git tag -l "v[0-9]*.[0-9]*.[0-9]*" --sort=-v:refname | head -n 1 || echo "v0.0.0")
          CURRENT_VERSION=${LAST_TAG#v}
          
          echo "Current production version: $CURRENT_VERSION"
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
      - name: Calculate hotfix version
        id: hotfix_version
        run: |
          VERSION="${{ steps.current_version.outputs.version }}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # 패치 버전 증가
          HOTFIX_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
          
          # gradle.properties 업데이트
          sed -i "s/version=.*/version=$HOTFIX_VERSION/" gradle.properties
          
          echo "Hotfix version: $HOTFIX_VERSION"
          echo "version=$HOTFIX_VERSION" >> $GITHUB_OUTPUT
          
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle
          
      - name: Build hotfix
        run: |
          chmod +x gradlew
          ./gradlew clean build
          
      - name: Run critical tests
        run: |
          ./gradlew test --tests "*Critical*" || ./gradlew test
          
      - name: Build bootJar
        run: |
          ./gradlew bootJar
          
      - name: Generate hotfix notes
        run: |
          VERSION="${{ steps.hotfix_version.outputs.version }}"
          BRANCH_NAME="${{ github.ref_name }}"
          
          echo "# 🚨 Hotfix Release $VERSION" > HOTFIX_NOTES.md
          echo "" >> HOTFIX_NOTES.md
          echo "**Type**: Emergency Fix" >> HOTFIX_NOTES.md
          echo "**Branch**: $BRANCH_NAME" >> HOTFIX_NOTES.md
          echo "**Date**: $(date +'%Y-%m-%d %H:%M:%S')" >> HOTFIX_NOTES.md
          echo "" >> HOTFIX_NOTES.md
          
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "## Description" >> HOTFIX_NOTES.md
            echo "${{ github.event.inputs.hotfix-description }}" >> HOTFIX_NOTES.md
          else
            echo "## Changes" >> HOTFIX_NOTES.md
            git log --pretty=format:"- %s" origin/main..HEAD >> HOTFIX_NOTES.md
          fi
          
          echo "" >> HOTFIX_NOTES.md
          echo "## ⚠️ Important" >> HOTFIX_NOTES.md
          echo "This is an emergency hotfix. Please:" >> HOTFIX_NOTES.md
          echo "1. Deploy to production immediately" >> HOTFIX_NOTES.md
          echo "2. Monitor closely for any issues" >> HOTFIX_NOTES.md
          echo "3. Merge back to develop and main branches" >> HOTFIX_NOTES.md
          
      - name: Commit hotfix version
        run: |
          git add gradle.properties
          git commit -m "hotfix: emergency fix version ${{ steps.hotfix_version.outputs.version }}"
          git push
          
      - name: Create hotfix tag
        run: |
          TAG_NAME="v${{ steps.hotfix_version.outputs.version }}-hotfix"
          git tag -a $TAG_NAME -m "Hotfix version ${{ steps.hotfix_version.outputs.version }}"
          git push origin $TAG_NAME
          
      - name: Create PR to main
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Hotfix: Merge ${context.ref.replace('refs/heads/', '')} to main`,
              head: context.ref.replace('refs/heads/', ''),
              base: 'main',
              body: `## 🚨 Emergency Hotfix
              
              **Version**: ${{ steps.hotfix_version.outputs.version }}
              **Branch**: ${context.ref.replace('refs/heads/', '')}
              
              ### Critical Fix
              This hotfix addresses critical production issues that require immediate deployment.
              
              ### Checklist
              - [ ] Tests pass
              - [ ] Build successful
              - [ ] Ready for production
              
              ### Post-Merge Actions
              1. Deploy to production immediately
              2. Create backport PR to develop branch
              3. Monitor production for stability`,
            });
            
            // Add labels
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['hotfix', 'urgent', 'production']
            });
            
            core.setOutput('pr_number', pr.number);
            core.setOutput('pr_url', pr.html_url);
            
      - name: Create PR to develop
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔄 Backport: Merge hotfix ${context.ref.replace('refs/heads/', '')} to develop`,
              head: context.ref.replace('refs/heads/', ''),
              base: 'develop',
              body: `## 🔄 Hotfix Backport
              
              **Version**: ${{ steps.hotfix_version.outputs.version }}
              **Branch**: ${context.ref.replace('refs/heads/', '')}
              
              ### Description
              Backporting hotfix changes to develop branch to maintain consistency.
              
              ### Important
              This PR should be merged after the main branch hotfix is deployed and verified.`,
            });
            
            // Add labels
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['hotfix', 'backport']
            });
            
      - name: Create emergency release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.hotfix_version.outputs.version }}-hotfix
          release_name: Hotfix ${{ steps.hotfix_version.outputs.version }}
          body_path: HOTFIX_NOTES.md
          draft: false
          prerelease: false
          
      - name: Upload hotfix JAR
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/libs/board-hole-${{ steps.hotfix_version.outputs.version }}.jar
          asset_name: board-hole-${{ steps.hotfix_version.outputs.version }}-hotfix.jar
          asset_content_type: application/java-archive
          
      - name: Emergency notification
        run: |
          echo "## 🚨 EMERGENCY HOTFIX READY!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Critical Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Hotfix Version**: ${{ steps.hotfix_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: v${{ steps.hotfix_version.outputs.version }}-hotfix" >> $GITHUB_STEP_SUMMARY
          echo "- **JAR**: board-hole-${{ steps.hotfix_version.outputs.version }}-hotfix.jar" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚡ Required Actions" >> $GITHUB_STEP_SUMMARY
          echo "1. **IMMEDIATE**: Review and merge PR to main" >> $GITHUB_STEP_SUMMARY
          echo "2. **DEPLOY**: Deploy to production immediately after merge" >> $GITHUB_STEP_SUMMARY
          echo "3. **MONITOR**: Watch production metrics closely" >> $GITHUB_STEP_SUMMARY
          echo "4. **BACKPORT**: Merge PR to develop after verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Pull Requests Created" >> $GITHUB_STEP_SUMMARY
          echo "- PR to main: Ready for immediate review" >> $GITHUB_STEP_SUMMARY
          echo "- PR to develop: Merge after production verification" >> $GITHUB_STEP_SUMMARY