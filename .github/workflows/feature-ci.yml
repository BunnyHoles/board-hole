name: Feature Branch CI

on:
  pull_request:
    branches: [ develop ]
    types: [ opened, synchronize, reopened ]

jobs:
  validate-branch-name:
    runs-on: ubuntu-latest
    steps:
      - name: Check branch naming convention
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          echo "Branch name: $BRANCH_NAME"
          
          # 허용된 브랜치 패턴 체크
          if [[ ! "$BRANCH_NAME" =~ ^(feature|bugfix|chore|test)/.+ ]]; then
            echo "❌ Branch name doesn't follow naming convention!"
            echo "Expected format: feature/*, bugfix/*, chore/*, or test/*"
            exit 1
          fi
          
          echo "✅ Branch name is valid"

  commit-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check commit messages
        run: |
          # PR의 모든 커밋 메시지 검사
          COMMITS=$(git log --format=%s origin/develop..HEAD)
          
          VALID_TYPES="feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert"
          INVALID_COMMITS=()
          
          while IFS= read -r commit; do
            if [[ ! "$commit" =~ ^($VALID_TYPES)(\(.+\))?: .+ ]]; then
              INVALID_COMMITS+=("$commit")
            fi
          done <<< "$COMMITS"
          
          if [ ${#INVALID_COMMITS[@]} -gt 0 ]; then
            echo "❌ Invalid commit messages found:"
            printf '%s\n' "${INVALID_COMMITS[@]}"
            echo ""
            echo "Expected format: <type>(<scope>): <subject>"
            echo "Valid types: $VALID_TYPES"
            exit 1
          fi
          
          echo "✅ All commit messages are valid"

  build-and-test:
    runs-on: ubuntu-latest
    needs: [ validate-branch-name, commit-lint ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test

      - name: Run integration tests
        run: ./gradlew integrationTest

      - name: Run e2e tests
        run: ./gradlew e2eTest

      - name: Generate test report
        if: always()
        run: ./gradlew jacocoAllTestReport jacocoTestReport

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: build/reports/tests/test/

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: build/reports/tests/integrationTest/

      - name: Upload e2e test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: build/reports/tests/e2eTest/

  code-quality:
    runs-on: ubuntu-latest
    needs: [ validate-branch-name, commit-lint ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Run Checkstyle
        run: ./gradlew checkstyleMain checkstyleTest

      - name: Run SpotBugs
        run: ./gradlew spotbugsMain

      - name: Upload Checkstyle report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: checkstyle-report
          path: build/reports/checkstyle/

  version-preview:
    runs-on: ubuntu-latest
    needs: [ build-and-test, code-quality ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Preview version change
        run: |
          CURRENT_VERSION=$(grep "^version=" gradle.properties | cut -d'=' -f2)
          PR_TITLE="${{ github.event.pull_request.title }}"
          
          echo "## 📊 Version Preview" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version**: $CURRENT_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$PR_TITLE" == feat!* ]] || [[ "$PR_TITLE" == *"BREAKING CHANGE"* ]]; then
            echo "**Expected Change**: Major version bump 🚀" >> $GITHUB_STEP_SUMMARY
          elif [[ "$PR_TITLE" == feat:* ]]; then
            echo "**Expected Change**: Minor version bump ✨" >> $GITHUB_STEP_SUMMARY
          elif [[ "$PR_TITLE" == fix:* ]]; then
            echo "**Expected Change**: Patch version bump 🐛" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Expected Change**: Development iteration 🔧" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const pr_title = context.payload.pull_request.title;
            let version_change = "Development iteration";
            
            if (pr_title.startsWith('feat!') || pr_title.includes('BREAKING CHANGE')) {
              version_change = "Major version bump 🚀";
            } else if (pr_title.startsWith('feat:')) {
              version_change = "Minor version bump ✨";
            } else if (pr_title.startsWith('fix:')) {
              version_change = "Patch version bump 🐛";
            }
            
            const comment = `### 🔍 CI Check Results
            
            ✅ Branch naming convention
            ✅ Commit message format
            ✅ Build successful
            ✅ Tests passed
            ✅ Code quality checks passed
            
            **Expected version change when merged**: ${version_change}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
