name: Release Preparation

on:
  push:
    branches: ['release/**']
  workflow_dispatch:
    inputs:
      release-version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
      - name: Determine release version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.release-version }}"
          else
            # Extract version from branch name (release/1.0.0 -> 1.0.0)
            BRANCH_NAME="${{ github.ref_name }}"
            VERSION=${BRANCH_NAME#release/}
          fi
          
          echo "Release version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Update to RC version
        id: rc_version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          CURRENT_RC=$(grep "^version=" gradle.properties | cut -d'=' -f2)
          
          # RC 버전 번호 계산
          if [[ $CURRENT_RC == *"-rc."* ]] && [[ $CURRENT_RC == $VERSION* ]]; then
            RC_NUM=${CURRENT_RC##*-rc.}
            NEXT_RC=$((RC_NUM + 1))
          else
            NEXT_RC=1
          fi
          
          RC_VERSION="${VERSION}-rc.${NEXT_RC}"
          
          # gradle.properties 업데이트
          sed -i "s/version=.*/version=$RC_VERSION/" gradle.properties
          
          echo "RC version: $RC_VERSION"
          echo "rc_version=$RC_VERSION" >> $GITHUB_OUTPUT
          
      - name: Generate CHANGELOG
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          RC_VERSION="${{ steps.rc_version.outputs.rc_version }}"
          
          # 이전 릴리즈 태그 찾기
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          echo "# Release Notes for $VERSION" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## 📦 Version: $RC_VERSION" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          # develop 브랜치와의 차이점 분석
          echo "## ✨ Changes" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          # 커밋 분류
          git log --pretty=format:"%s" origin/main..HEAD | while read -r commit; do
            if [[ $commit == feat:* ]]; then
              echo "- ✨ $commit" >> RELEASE_NOTES.md
            elif [[ $commit == fix:* ]]; then
              echo "- 🐛 $commit" >> RELEASE_NOTES.md
            elif [[ $commit == docs:* ]]; then
              echo "- 📝 $commit" >> RELEASE_NOTES.md
            elif [[ $commit == refactor:* ]]; then
              echo "- ♻️ $commit" >> RELEASE_NOTES.md
            elif [[ $commit == test:* ]]; then
              echo "- ✅ $commit" >> RELEASE_NOTES.md
            elif [[ $commit == chore:* ]]; then
              echo "- 🔧 $commit" >> RELEASE_NOTES.md
            fi
          done
          
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle
          
      - name: Build RC version
        run: |
          chmod +x gradlew
          ./gradlew clean build
          
      - name: Run all tests
        run: |
          ./gradlew test
          ./gradlew integrationTest || true
          
      - name: Commit RC version
        run: |
          git add gradle.properties RELEASE_NOTES.md
          git commit -m "chore: prepare release candidate ${{ steps.rc_version.outputs.rc_version }}"
          git push
          
      - name: Create RC tag
        run: |
          TAG_NAME="v${{ steps.rc_version.outputs.rc_version }}"
          git tag -a $TAG_NAME -m "Release candidate ${{ steps.rc_version.outputs.rc_version }}"
          git push origin $TAG_NAME
          
      - name: Create draft release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.rc_version.outputs.rc_version }}
          release_name: Release Candidate ${{ steps.rc_version.outputs.rc_version }}
          body_path: RELEASE_NOTES.md
          draft: true
          prerelease: true
          
      - name: Summary
        run: |
          echo "## 🚀 Release Preparation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **RC Version**: ${{ steps.rc_version.outputs.rc_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag Created**: v${{ steps.rc_version.outputs.rc_version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Test RC version in staging environment" >> $GITHUB_STEP_SUMMARY
          echo "2. If all tests pass, create PR to main branch" >> $GITHUB_STEP_SUMMARY
          echo "3. Merge PR to trigger production release" >> $GITHUB_STEP_SUMMARY