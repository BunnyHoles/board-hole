name: Production Release

on:
  push:
    branches: [main, master]
  pull_request:
    types: [closed]
    branches: [main, master]

jobs:
  release:
    if: github.event_name == 'push' || (github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/'))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
      - name: Get version from gradle.properties
        id: get_version
        run: |
          CURRENT_VERSION=$(grep "^version=" gradle.properties | cut -d'=' -f2)
          
          # RC 버전에서 정식 버전으로 변환
          if [[ $CURRENT_VERSION == *"-rc."* ]]; then
            RELEASE_VERSION=${CURRENT_VERSION%-rc.*}
          elif [[ $CURRENT_VERSION == *"-SNAPSHOT"* ]]; then
            RELEASE_VERSION=${CURRENT_VERSION%-SNAPSHOT}
          else
            RELEASE_VERSION=$CURRENT_VERSION
          fi
          
          echo "Release version: $RELEASE_VERSION"
          echo "version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          
      - name: Update to release version
        run: |
          sed -i "s/version=.*/version=${{ steps.get_version.outputs.version }}/" gradle.properties
          
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle
          
      - name: Build release version
        run: |
          chmod +x gradlew
          ./gradlew clean build
          
      - name: Build bootJar
        run: |
          ./gradlew bootJar
          
      - name: Generate final CHANGELOG
        id: changelog
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          
          # 이전 정식 릴리즈 태그 찾기
          LAST_TAG=$(git tag -l "v[0-9]*.[0-9]*.[0-9]*" --sort=-v:refname | head -n 1 || echo "")
          
          echo "# 📦 Release $VERSION" > CHANGELOG_RELEASE.md
          echo "" >> CHANGELOG_RELEASE.md
          echo "**Release Date**: $(date +'%Y-%m-%d')" >> CHANGELOG_RELEASE.md
          echo "" >> CHANGELOG_RELEASE.md
          
          # 주요 변경사항 분류
          echo "## ✨ New Features" >> CHANGELOG_RELEASE.md
          git log --pretty=format:"%s" ${LAST_TAG}..HEAD | grep "^feat:" | sed 's/feat:/- /' >> CHANGELOG_RELEASE.md || echo "None" >> CHANGELOG_RELEASE.md
          echo "" >> CHANGELOG_RELEASE.md
          
          echo "## 🐛 Bug Fixes" >> CHANGELOG_RELEASE.md
          git log --pretty=format:"%s" ${LAST_TAG}..HEAD | grep "^fix:" | sed 's/fix:/- /' >> CHANGELOG_RELEASE.md || echo "None" >> CHANGELOG_RELEASE.md
          echo "" >> CHANGELOG_RELEASE.md
          
          echo "## ♻️ Refactoring" >> CHANGELOG_RELEASE.md
          git log --pretty=format:"%s" ${LAST_TAG}..HEAD | grep "^refactor:" | sed 's/refactor:/- /' >> CHANGELOG_RELEASE.md || echo "None" >> CHANGELOG_RELEASE.md
          echo "" >> CHANGELOG_RELEASE.md
          
          echo "## 📝 Documentation" >> CHANGELOG_RELEASE.md
          git log --pretty=format:"%s" ${LAST_TAG}..HEAD | grep "^docs:" | sed 's/docs:/- /' >> CHANGELOG_RELEASE.md || echo "None" >> CHANGELOG_RELEASE.md
          echo "" >> CHANGELOG_RELEASE.md
          
          # 기존 CHANGELOG.md에 추가
          if [ -f CHANGELOG.md ]; then
            echo "" >> CHANGELOG_RELEASE.md
            echo "---" >> CHANGELOG_RELEASE.md
            echo "" >> CHANGELOG_RELEASE.md
            cat CHANGELOG.md >> CHANGELOG_RELEASE.md
          fi
          
          mv CHANGELOG_RELEASE.md CHANGELOG.md
          
      - name: Commit release version
        run: |
          git add gradle.properties CHANGELOG.md
          git commit -m "chore: release version ${{ steps.get_version.outputs.version }} [skip ci]"
          
      - name: Create release tag
        run: |
          TAG_NAME="v${{ steps.get_version.outputs.version }}"
          git tag -a $TAG_NAME -m "Release version ${{ steps.get_version.outputs.version }}"
          
      - name: Update to next SNAPSHOT version
        id: next_version
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          NEXT_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))-SNAPSHOT"
          
          sed -i "s/version=.*/version=$NEXT_VERSION/" gradle.properties
          
          echo "Next development version: $NEXT_VERSION"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          
      - name: Commit next development version
        run: |
          git add gradle.properties
          git commit -m "chore: prepare next development version ${{ steps.next_version.outputs.next_version }} [skip ci]"
          
      - name: Push changes
        run: |
          git push origin main
          git push origin v${{ steps.get_version.outputs.version }}
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          
      - name: Upload JAR to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/libs/board-hole-${{ steps.get_version.outputs.version }}.jar
          asset_name: board-hole-${{ steps.get_version.outputs.version }}.jar
          asset_content_type: application/java-archive
          
      - name: Build and push Docker image
        if: success()
        run: |
          # Docker 이미지 빌드 및 푸시 (선택사항)
          # docker build -t ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }} .
          # docker push ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}
          # docker tag ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }} ghcr.io/${{ github.repository }}:latest
          # docker push ghcr.io/${{ github.repository }}:latest
          echo "Docker build skipped (uncomment to enable)"
          
      - name: Summary
        run: |
          echo "## 🎉 Production Release Completed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Release Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: v${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Next Version**: ${{ steps.next_version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Release Assets" >> $GITHUB_STEP_SUMMARY
          echo "- JAR file: board-hole-${{ steps.get_version.outputs.version }}.jar" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Release: [View Release](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.get_version.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Deployment" >> $GITHUB_STEP_SUMMARY
          echo "Release is ready for production deployment!" >> $GITHUB_STEP_SUMMARY